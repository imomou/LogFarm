AWSTemplateFormatVersion: 2010-09-09
Description: Create DynamoDb table to store Elmah Logs and CloudWatch for Nlog
Metadata:
  DefaultName: LogFarm
Parameters:
  ElmahTableName:
    Description: Name of DynamoDb table will be use to store Elmah logs
    Type: String
    Default: Elmah
  NLogGroupName:
    Description: Name of LogGroup will be use for storing NLog logs
    Type: String
    Default: NLog
  IsSubscribed:
    Description: Logevents to be delivered to AWS Kinesis Stream
    Type: String
    AllowedValues:
      - subscribe
      - unsubscribe
    Default: unsubscribe
  ReadWriteCapacityUnits:
    Description: Name of Elmah table will be created in DynamoDb
    Type: String
    Default: '1'
Conditions:
  Subscribe: !Equals 
    - !Ref IsSubscribed
    - subscribe
Resources:
  ElmahTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: DateTimeId
          AttributeType: S
        - AttributeName: ApplicationName
          AttributeType: S
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      KeySchema:
        - AttributeName: DateTimeId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: ApplicationName-DateTimeId-Index
          KeySchema:
            - AttributeName: ApplicationName
              KeyType: HASH
            - AttributeName: DateTimeId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
  NLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '${AWS::StackName}-${NLogGroupName}' 
  NLogGroupCSub:
    DependsOn:
      - LogStream
      - LogStreamRole
      - LogStreamRolePolicy
    Type: 'AWS::Logs::SubscriptionFilter'
    Condition: Subscribe
    Properties:
      DestinationArn: !GetAtt LogStream.Arn
      FilterPattern: ''
      LogGroupName: !Ref NLogGroup
      RoleArn: !GetAtt LogStreamRole.Arn
  LogFarmMp:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Permission for LogFarm related services.
      Path: /generic/logfarm/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:*'
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${NLogGroup}*'
          - Effect: Deny
            Action:
              - 'logs:Delete*'
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${NLogGroup}*'
          - Effect: Allow
            Action:
              - 'dynamodb:*'            
            Resource:
              - !Sub '${ElmahTable.Arn}*'
          - Effect: Deny
            Action:
              - 'dynamodb:Delete*'
            Resource:
              - !Sub '${ElmahTable.Arn}*'
  LogStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      ShardCount: 1
  LogStreamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub 'logs.${AWS::Region}.amazonaws.com'
            Action: 'sts:AssumeRole'
  LogStreamRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: KinesisPutRecordPolicy
      Roles:
        - !Ref LogStreamRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 'kinesis:PutRecord'
            Resource: !GetAtt LogStream.Arn
          - Effect: Allow
            Action: 'iam:PassRole'
            Resource: !GetAtt LogStreamRole.Arn
Outputs:
  LogStreamArn:
    Value: !GetAtt LogStream.Arn